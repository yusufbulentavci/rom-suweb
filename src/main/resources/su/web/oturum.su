--@DEPENDS:.base,.alan,.yol,.uye,.notification,.jwt

--@TABLE uzanti=otu ver=1
create table web.oturum(
	id bigserial primary key,
	sid text unique,
	alan int not null references web.alan(id),
	uye int references web.uye(id),
	cihaz jsonb,
	ip inet,
	baslangic timestamp default now(),
	lang char(2) default 'uz',
	country char(2) default 'TR'
  );
--@UPGRADE: 1 alter table web.oturum alter column cihaz type jsonb using cihaz::jsonb;
--@UPGRADE: 1 alter table web.oturum alter column ip type inet using ip::inet;
--@UPGRADE: 1 alter table web.oturum drop column hata_sayisi;
--@UPGRADE: 1 alter table web.oturum drop column bitis;
--@END

--@TYPE ver=3
create type web.cagridetay as (
	fonk text,
	dokun text,
	alan int,
	alanonek text,
	tanim text,
	id text,
	oturumid bigint,
	sid text,
	params json,
	retset boolean,
	durum text,
	eposta text,
	acikla text,
	uye_id int,
	rettype text
);
--@UPGRADE: 2 alter type web.cagridetay add attribute uye_id int;
--@UPGRADE: 3 alter type web.cagridetay add attribute rettype text;
--@END


--@FUNCTION norom
create function web.generate_random_password(p_count int) returns text
    as $$
declare
   j int4;
   result text;
   allowed text;
   allowed_len int4;
begin
   allowed := '123456789abcdefghjkmnpqrstuvwxyzABCDEFGHJKMNPQRSTUVWXYZ';
   allowed_len := length(allowed);
   result := '';
   while length(result) < p_count loop
      j := int4(random() * allowed_len);
      result := result || substr(allowed, j+1, 1);
   end loop;
   return result;
end;
$$ language plpgsql;
--@END

--@FUNCTION norom ver=13
create function web.oturum_ilk(a_method text, a_alan text, a_sid text, a_yol text, a_ip text, a_cihaz jsonb, 
	p_email text default null, p_password text default null, p_forgot boolean default false, p_newuser boolean default false) returns web.cagridetay
language 'plpgsql' as
$$
       declare
              v_cd web.cagridetay;
              v_yol web.yolcoz;
              v_func text;
              v_sema text;
              v_tablo text;
              v_cihaz jsonb;
              v_uye int;
              v_pwd text;
              v_token text;
       begin
       -- alan
          	select id,onek into v_cd.alan,v_cd.alanonek 
                 from web.alan 
                 where a_alan=isim;
            if not found then
            	v_cd.durum:='domain_not_found';
            	return v_cd;
            end if;
        
      		if v_cd.alan is null or v_cd.alanonek is null then
      			v_cd.durum:='domain_found_but_onek_is_null';
            	return v_cd;
      		end if;

        
       -- onek silimi
       		if v_cd.alanonek is not null then
       			if length(v_cd.alanonek)>length(a_yol) then
       				v_cd.durum:='domain_found_but_onek_is_null';
            		return v_cd;
       				--raise exception 'Yol, onekten kisa kisa:Yol=%,Onek=%',a_yol,v_cd.alanonek;
       			end if;
       			if length(v_cd.alanonek)=length(a_yol) then
       				a_yol:='/';
       			else
       				a_yol:=substring(a_yol,length(v_cd.alanonek)+1);
       			end if;
       		end if;

       -- oturum       
         if a_sid is null then
			-- oturum yok
				-- eposta yoksa geri don
				if p_email is null then
					v_cd.durum:='require_email_to_login';
					return v_cd;
				end if;
				
				-- unuttu ise uye veritabaninda eposta kontrolu yap
				if p_forgot is not null and p_forgot then
					select id into v_uye
						from web.uye
						where eposta=p_email;
					if not found then
						v_cd.durum:='forgot_pwd_email_not_found';
						return v_cd;
					end if;
					-- var ise yeni sifre olustur, eposta ile gonder
					v_pwd:=web.generate_random_password(8);
					v_token:=web.generate_random_password(32);
					update web.uye
						set sifre=v_pwd, token=v_token
						where id=v_uye;
					
					insert into web.notification
						(cls,eposta,uye_id,subject,body,expire_time)
						values('e-mail',p_email,v_uye,
							'New password for campus',
							'New password is: '||v_pwd,
							now()+'1 hours'
							);
					
					v_cd.durum:='forgot_pwd_follow_email';
					return v_cd;						
				end if;
				
				-- yeni kullanici ise uye veritabaninda eposta kontrolu yap
				if p_newuser is not null and p_newuser then
					select id into v_uye
						from web.uye
						where eposta=p_email;
					if found then
						v_cd.durum:='newuser_email_already_exist';
						return v_cd;
					end if;
					
					-- var ise yeni sifre olustur, eposta ile gonder
					v_pwd:=web.generate_random_password(8);
					v_token:=web.generate_random_password(32);
					insert into web.uye
						(alan,eposta,sifre)
						values(v_cd.alan,p_email,v_pwd)
						returning id into v_uye; 
					
					insert into web.notification
						(cls,eposta,uye_id,subject,body,expire_time)
						values('e-mail',p_email,v_uye,
							'New password for campus',
							'New password is: '||v_pwd,
							now()+'1 hours'
							);
					
					v_cd.durum:='create_user_follow_email';
					return v_cd;						
				end if;
				
				-- sifre yok ise sorun
				if p_password is null then
					v_cd.durum:='login_requires_password';
					return v_cd;
				end if;
				
				select id into v_uye 
					from web.uye
					where alan=v_cd.alan
						and eposta=p_email
						and sifre=p_password;
			
				if not found then
					v_cd.durum:='login_email_password_error';
					return v_cd;
				end if;
				
				delete from web.oturum where uye=v_uye and cihaz=a_cihaz;

                insert into web.oturum (alan,sid,ip,cihaz,uye) 
                        values (v_cd.alan, web.sign(json_build_object('email',p_email,'ts',now()), 'KRALRUZGAR', 'hs256'), a_ip::inet, a_cihaz, v_uye)
                        returning id,sid into strict v_cd.oturumid,v_cd.sid;
				v_cd.durum:='login_success';
				v_cd.uye_id:=v_uye;
				return v_cd;
         else
                select id,sid,cihaz,uye 
                	into  v_cd.oturumid,v_cd.sid,v_cihaz,v_uye 
                       from web.oturum
                       where v_cd.alan=alan and a_sid=sid;
				if not found then
						v_cd.durum:='no_session';
						return v_cd;
				end if;


                if a_cihaz is not null and v_cihaz is not null and a_cihaz<>v_cihaz then
                	-- ayni oturumda farkli cihazlar kabul edilemez.
                	v_cd.acikla:='Security exception for '|| a_ip;
                	v_cd.durum:='security_error';
                	return v_cd;
                end if;
         end if;
         
         select eposta,id into strict v_cd.eposta,v_cd.uye_id
         	from web.uye
         	where id=v_uye;

       -- yol
          select * into strict v_yol from web.yol_analiz(a_method,a_yol);
          select v_yol.yol,v_yol.id into v_cd.tanim,v_cd.id;
       -- find table
              --select * into strict v_tablo
              --       from public.romcomp 
              --       where comptype='table' and prefix=v_yol.prefix and not norom; 

          select schemaname,named into v_sema,v_tablo
                 from public.romcomp 
                 where comptype='table' and uzanti=v_yol.uzanti and not norom;

          if not found then
          	v_cd.durum:='prefix_not_found';
          	v_cd.acikla:='not_found_prefix: Table not found for yol: '||a_yol;
          	return v_cd;
          end if;

       -- find function
           if v_yol.func is null then
           		v_cd.durum:='method_not_found';
           		return v_cd;
           end if;
           
           v_func:=v_tablo||'_'||v_yol.func;
           select dokun into v_cd.dokun from public.romcomp
                                where comptype='function' and schemaname=v_sema and named=v_func and not norom;
           
           if not found then
                 v_cd.durum:='function_not_found';
                 v_cd.acikla:='Function not found:'|| v_func;
           		return v_cd;
           end if;
               
       -- find function params
           select web.oturum_funcargs(v_sema,v_func) into v_cd.params;
           
           if not found then
                 v_cd.durum:='function_not_found_for_params';
                 v_cd.acikla:='Function not found:'|| v_func;
           end if;
           
           v_cd.fonk:=v_sema||'.'||v_func;

	   -- find if returns set
   		   select 
   		   		proretset,t.typname 
   		   			into strict v_cd.retset,v_cd.rettype
   		   	from pg_proc pp 
   		   		join pg_namespace pn 
   		   			on (pp.pronamespace=pn.oid)  
   		   		join pg_type t 
   		   			on (pp.prorettype=t.oid)
   		   	where proname=v_func and nspname=v_sema;

			v_cd.durum:='ok';

           return v_cd;
       
       end;
$$;
--@END


--@FUNCTION norom ver=2
create function web.oturum_funcargs(p_sema text, p_func text) returns json language 'sql' as
$$
	select case when a.args::text='[null]' then '[]'::json else a.args end from (
		select 
		      proc.routine_name,  
		      	json_agg(args.parameter_name||'-'||args.data_type order by args.ordinal_position) args
		from information_schema.routines proc
		left join information_schema.parameters args
		          on proc.specific_schema = args.specific_schema
		          and proc.specific_name = args.specific_name
		where proc.routine_schema=p_sema and proc.routine_name=p_func
		group by proc.routine_name
		) a;
$$; 
--@END

-- create user
--@RUN utest
do
$$
declare
	v_alanid bigint;
	v_cd web.cagridetay;
begin
	insert into web.alan(isim,onek,email_domain) values ('deneme.com','/iceri/deyim', 'localhost.com');
	select id into strict v_alanid from web.alan where isim='deneme.com';
	create schema myschema;
	create table mytable (a int);
	create function myschema.mytable_myfunc(a_oturum int, p_msg text) returns int language 'sql' as $BODY$ select 1; $BODY$; 
	insert into public.romcomp(comptype,schemaname,named,ver,norom,uzanti)	values ('table', 'myschema', 'mytable', '1', false, 'myt');
	insert into public.romcomp(comptype,schemaname,named,ver,norom,uzanti)	values ('function', 'myschema', 'mytable_myfunc', '1', false, null);
	
--	insert into web.uye (alan,eposta,sifre) values (v_alanid,'tester@deneme.com', 'sifre');
	
	
	select * into v_cd 
		from web.oturum_ilk('get', 'deneme.com', null, '/iceri/deyim/my/pri.myt/myfunc..', 
			'192.168.1.5','{"ua":""}'::jsonb,'tester@deneme.com','sifre',false,true);

	perform assert_equals('create_user_follow_email', v_cd.durum);
end;
$$ language 'plpgsql';
--@END

-- forget password
--@RUN utest
do
$$
declare
	v_alanid bigint;
	v_cd web.cagridetay;
begin
	insert into web.alan(isim,onek,email_domain) values ('deneme.com','/iceri/deyim', 'localhost.com');
	select id into strict v_alanid from web.alan where isim='deneme.com';
	create schema myschema;
	create table mytable (a int);
	create function myschema.mytable_myfunc(a_oturum int, p_msg text) returns int language 'sql' as $BODY$ select 1; $BODY$; 
	insert into public.romcomp(comptype,schemaname,named,ver,norom,uzanti)	values ('table', 'myschema', 'mytable', '1', false, 'myt');
	insert into public.romcomp(comptype,schemaname,named,ver,norom,uzanti)	values ('function', 'myschema', 'mytable_myfunc', '1', false, null);
	
	insert into web.uye (alan,eposta,sifre) values (v_alanid,'tester@deneme.com', 'sifre');
	
	
	select * into v_cd 
		from web.oturum_ilk('get', 'deneme.com', null, '/iceri/deyim/my/pri.myt/myfunc..', 
			'192.168.1.5','{"ua":""}'::jsonb,'tester@deneme.com','sifre',true,false);

	perform assert_equals('forgot_pwd_follow_email', v_cd.durum);
end;
$$ language 'plpgsql';
--@END


----- login...
--@RUN utest
do
$$
declare
	v_alanid bigint;
	v_cd web.cagridetay;
begin
	insert into web.alan(isim,onek,email_domain) values ('deneme.com','/iceri/deyim', 'localhost.com');
	select id into strict v_alanid from web.alan where isim='deneme.com';
	create schema myschema;
	create table mytable (a int);
	create function myschema.mytable_myfunc(a_oturum int, p_msg text) returns int language 'sql' as $BODY$ select 1; $BODY$; 
	insert into public.romcomp(comptype,schemaname,named,ver,norom,uzanti)	values ('table', 'myschema', 'mytable', '1', false, 'myt');
	insert into public.romcomp(comptype,schemaname,named,ver,norom,uzanti)	values ('function', 'myschema', 'mytable_myfunc', '1', false, null);
	
	insert into web.uye (alan,eposta,sifre) values (v_alanid,'tester@deneme.com', 'sifre');
	
	
	select * into v_cd 
		from web.oturum_ilk('get', 'deneme.com', null, '/iceri/deyim/my/pri.myt/myfunc..', 
			'192.168.1.5','{"ua":""}'::jsonb,'tester@deneme.com','sifre');
--	perform assert_equals('mid', v_cd.sid);
	perform assert_equals('login_success', v_cd.durum);
end;
$$ language 'plpgsql';
--@END

--@RUN utest
do
$$
declare
	v_cd web.cagridetay;
begin
	insert into web.alan(isim,onek,email_domain) values ('deneme.com','/iceri/deyim','localhost.com');
	create schema myschema;
	create table mytable (a int);
	create function myschema.mytable_myfunc(a_oturum int, p_msg text) returns int language 'sql' as $BODY$ select 3; $BODY$; 
	insert into public.romcomp(comptype,schemaname,named,ver,norom,uzanti)	values ('table', 'myschema', 'mytable', '1', false, 'myt');
	insert into public.romcomp(comptype,schemaname,named,ver,norom,uzanti)	values ('function', 'myschema', 'mytable_myfunc', '1', false, null);
	--select 
	perform	web.oturum_ilk('get', 'deneme.com', null, '/iceri/deyim/my/pri.myt/myfunc..', '192.168.1.5','{"ua":""}'::jsonb);
	--	into v_cd;
		
--	perform assert_equals('myschema.mytable_myfunc', (web.oturum_ilk('get', 'deneme.com', null, '/iceri/deyim/my/pri.myt/myfunc..', '192.168.1.5','{"ua":""}'::jsonb)).fonk);
--	perform assert_equals('[]', (web.oturum_ilk('get', 'deneme.com', null, '/iceri/deyim/my/pri.myt/myfunc..', '192.168.1.5','{"ua":""}'::jsonb)).params::text);
end;
$$ language 'plpgsql';
--@END


--@FUNCTION
create function web.oturum_benim(a_sid bigint, p_eposta text, p_sifre text) returns text
language 'plpgsql'
as $$
	declare
		v_oturum web.oturum;
		v_uye web.uye;
	begin
	-- oturumu bul
		select * into a_sid from web.oturum where id=a_sid;
		if not found then
			return 'oturum_yok';
		end if;
	-- kullaniciyi bul
		select * into v_uye from web.uye where eposta=p_eposta and login and not kume;
		if not found then
			return 'kullanici_yok';
		end if;
		
		if v_uye.askida then
			return 'kullanici_askida'; 
		end if;
		
	-- sifreyi kontrol et
		if v_uye.sifre<>p_sifre then
			return 'sifre_hatali';
		end if;
		
		if v_oturum.uye is not null then
			if v_oturum.uye<>v_uye.id then
				return 'kullanici_karmasa';
			end if;
			return 'ok';			
		end if;
		update web.oturum 
			set
				uye=v_uye.id
			where
				id=a_sid;
		
		return 'ok';
	end;
$$;
--@END


--@FUNCTION
create function web.oturum_benimcihaz(a_sid bigint, p_cihaz text) returns text
language 'plpgsql'
as $$
	declare
		v_oturum web.oturum;
		v_uye web.uye;
	begin
	-- oturumu bul
		select * into a_sid from web.oturum where id=a_sid;
		if not found then
			return 'oturum_yok';
		end if;
	-- kullaniciyi bul
		select * into v_uye from web.uye where cihaz=p_cihaz and login and not kume;
		if not found then
			return 'kullanici_yok';
		end if;

		if v_uye.askida then
			return 'kullanici_askida'; 
		end if;
		
	-- sifreyi kontrol et
		if v_uye.sifre<>p_sifre then
			return 'sifre_hatali';
		end if;
		
		if v_oturum.uye is not null then
			if v_oturum.uye<>v_uye.id then
				return 'kullanici_karmasa';
			end if;
			return 'ok';			
		end if;
		update web.oturum 
			set
				uye=v_uye.id
			where
				id=a_sid;
		
		return 'ok';
	end;
$$;
--@END

--@FUNCTION ver=3
create function web.oturum_kapat(a_id text) returns text
language 'plpgsql'
as $$
	declare
		v_oturum web.oturum;
		v_uye web.uye;
	begin
	-- kullanici iliskisi bitirildi
		delete from web.oturum 
			where sid=a_id;
		return 'ok';
	end;
$$;
--@END


