--@DEPENDS:.base,testing,.employee,.department,.title

--@TABLE uzanti=epo
create table academy.employee_position(
	h jsonb,
    employee_position_id serial primary key,
    employee_id int references academy.employee(employee_id) not null,
    department_id int references academy.department(department_id) not null,
    title_id int references academy.title(title_id) not null,
    start_date date not null,
    end_date date
  );
--@END

--@FUNCTION 
create function academy.employee_position_new(p_employee_id int, p_department_id int, p_title_id int, p_start_date date) returns academy.employee_position as $$
declare
	v_ret academy.employee_position;
begin
	insert into academy.employee_position(employee_id,department_id,title_id,start_date) 
		values (p_employee_id, p_department_id, p_title_id, p_start_date) returning * into v_ret;
	return v_ret;
end;
$$ language 'plpgsql';
--@END

--@FUNCTION 
create function academy.employee_position_list(p_employee_id int, p_department_id int, p_title_id int, p_is_only_active boolean) returns setof academy.employee_position as $$
begin
	return query
		select * 
			from academy.employee_position
		where
			(p_employee_id is null or employee_id=p_employee_id)
			and (p_department_id is null or department_id=p_department_id)
			and (p_title_id is null or title_id=p_title_id)
			and (p_is_only_active is null or not p_is_only_active or end_date is null);
end;
$$ language 'plpgsql';
--@END

--@FUNCTION 
create function academy.employee_position_update(a_id int, p_employee_id int, p_department_id int, p_title_id int, p_start_date date) returns academy.employee_position as $$
declare
	v_ret academy.employee_position;
begin
	update academy.employee_position
		set
			employee_id=p_employee_id,
			department_id=p_department_id,
			title_id=p_title_id,
			start_date=p_start_date
		where
			employee_position_id=a_id
		returning * into v_ret;
	return v_ret;
end;
$$ language 'plpgsql';
--@END

--@FUNCTION http=post
create function academy.employee_position_end_working(a_id int, p_end_date date) returns academy.employee_position as $$
declare
	v_ret academy.employee_position;
begin
	update academy.employee_position
		set
			end_date=p_end_date
		where
			employee_position_id=a_id
		returning * into v_ret;
	return v_ret;
end;
$$ language 'plpgsql';
--@END

--@FUNCTION 
create function academy.employee_position_delete(a_id int) returns academy.employee_position as $$
declare
	v_ret academy.employee_position;
begin
	delete 
		from academy.employee_position
		where
			employee_position_id=a_id
		returning * into v_ret;
	return v_ret;
end;
$$ language 'plpgsql';
--@END

--@RUN utest
select check_not_null(
	set_config('my.person_id',  
		(academy.person_new('jshshir2','{"en":"name"}'::jsonb, 
			'{"en":"sur"}'::jsonb, 
			'{"en":"fathe"}'::jsonb, 
			'13-11-1774'::date, null)
			).person_id::text, 
		true)
		);

select check_not_null(
	set_config('my.employee_id',  
		(academy.employee_new(current_setting('my.person_id')::int)).employee_id::text,
		true)
		);

select check_not_null((set_config('my.faculty_id',  (academy.faculty_new('{"en":"Muhendislik Fakultesi"}'::jsonb,'{"en":"Muh.Fak."}'::jsonb)).faculty_id::text, true)));

select check_not_null(
	set_config('my.department_id',
		(academy.department_new(
			'{"en":"Bilgisayar Bilimleri Muhendisligi"}'::jsonb,
			'{"en":"Bilg.Bil.Muh."}'::jsonb,
			current_setting('my.faculty_id')::int)).department_id::text,
		true)
	);


select check_not_null(
	set_config('my.title_id',
		(academy.title_new('{"en":"profesor"}'::jsonb,'{"en":"prof."}'::jsonb,true,false)).title_id::text,
		true)
	);


select check_not_null(
	academy.employee_position_new(
		current_setting('my.employee_id')::int,
		current_setting('my.department_id')::int,
		current_setting('my.title_id')::int,
		now()::date	
	));
select assert_equals(1, (select count(*)  from academy.employee_position_list(null,null,null,null)));
select assert_equals(1, (select count(*)  from academy.employee_position_list(null,null,null,true)));
select check_not_null((academy.employee_position_update(1, 
		current_setting('my.employee_id')::int,
		current_setting('my.department_id')::int,
		current_setting('my.title_id')::int,
		now()::date	
	)).employee_position_id);
select check_not_null(academy.employee_position_end_working(1,now()::date));
select assert_equals(0, (select count(*)  from academy.employee_position_list(null,null,null,true)));
select check_not_null(academy.employee_position_delete(1));
select assert_equals(0, (select count(*)  from academy.employee_position_list(null,null,null,null)));

--@END
