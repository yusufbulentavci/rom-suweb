--@DEPENDS:.base,testing,.person,.employee,.employee_position,.ornek-veri



--@FUNCTION ver=1
create function academy.employee_get(a_id int) returns academy.employee as $$
declare
	v_ret academy.employee;
begin
	select json_build_object(
				'person',row_to_json(p),
				'positions',(select json_agg(
										json_build_object(
														'employee_position_id', ep.employee_position_id,
														'department_id', de.department_id,
														'department_name', de.department_name,
														'title_id', ti.title_id,
														'title_name', ti.title_name,
														'start_date', ep.start_date,
														'end_date', ep.end_date)
														) 
								from academy.employee_position ep 
									join academy.department de using(department_id)
									join academy.title ti using(title_id)
								where employee_id=e.employee_id )
				),
			e.employee_id,e.person_id  into v_ret 
		from academy.employee e, academy.person p
		where
			employee_id=a_id and p.person_id=e.person_id;
	return v_ret;
end;
$$ language 'plpgsql';
--@END


--@FUNCTION
create function academy.employee_list(p_person_id int) returns setof academy.employee as $$
begin
	return query
		select to_json(p),employee_id,person_id 
			from academy.employee e, academy.person p
			where
				(p_person_id is null or person_id=p_person_id);
end;
$$ language 'plpgsql';
--@END

--@FUNCTION 
create function academy.employee_update(a_id int, p_person_id int) returns academy.employee as $$
declare
	v_ret academy.employee;
begin
	update academy.employee
		set
			person_id=p_person_id
		where
			employee_id=a_id
		returning * into v_ret;
	return v_ret;
end;
$$ language 'plpgsql';
--@END

--@RUN utest
select check_not_null(
	set_config('my.person_id',  
		(academy.person_new('jshshir2','{"en":"name"}'::jsonb, 
			'{"en":"sur"}'::jsonb, 
			'{"en":"fathe"}'::jsonb, 
			'13-11-1774'::date, null)
			).person_id::text, 
		true)
		);

select check_not_null(academy.employee_new(current_setting('my.person_id')::int));
--select check_not_null(academy.employee_update(1, current_setting('my.person_id')::int));
--select assert_equals(1, (select count(*)  from academy.employee_list(current_setting('my.person_id')::int)));

--select check_not_null(academy.employee_delete(1));
--select assert_equals(0, (select count(*)  from academy.employee_list(null)));

--@END

--@RUN utest

insert into academy.person (person_id, jshshir,first_name,surname,father_name,date_of_birth)
	values 	(1, 'jsh1', '{"en":"fen", "uz":"fuz", "ru":"fru"}', '{"en":"sen", "uz":"suz", "ru":"sru"}', '{"en":"faen", "uz":"fauz", "ru":"faru"}', '1999-10-20'),
			(2, 'djsh2', '{"en":"xfen", "uz":"xfuz", "ru":"xfru"}', '{"en":"xsen", "uz":"xsuz", "ru":"xsru"}', '{"en":"xfaen", "uz":"xfauz", "ru":"xfaru"}', '1979-10-20');

insert into academy.faculty (faculty_id, faculty_name, abbreviation)
	values 	(1, '{"en":"Faculty of Engineering", "uz":"uzFaculty of Engineering", "ru":"ruFaculty of Engineering"}', 
				'{"en":"F.Eng.", "uz":"uzFac.Eng.", "ru":"ruFacEng"}' ),
			(2, '{"en":"Faculty of Medicine", "uz":"uzFaculty of Medicine", "ru":"ruFaculty of Medicine"}', 
				'{"en":"F.Med.", "uz":"uzFac.Med.", "ru":"ruFacMed"}' );
				
insert into academy.department (department_id, department_name, abbreviation, faculty_id)
	values	(1, '{"en":"Computer Engineering", "uz":"uzComputer  Engineering", "ru":"ruComputer  Engineering"}',
					'{"en":"Comp.Eng.", "uz":"uzComp.Eng.", "ru":"ruComp.Eng."}', 1),
			(2, '{"en":"Medicine", "uz":"uzMedicine", "ru":"ruMedicine"}',
					'{"en":"Med.", "uz":"uzMed.", "ru":"ruMed."}', 2);
					
insert into academy.employee(employee_id,person_id)
	values  (1,1),
			(2,2);

insert into academy.title(title_id,title_name,abbreviation,is_academic,is_institutional)
	values  (1,'{"en":"Profesor", "uz":"uzProfesor", "ru":"ruProfesor"}',
				'{"en":"Prof.", "uz":"uzPro.", "ru":"ruProf."}',true,false),
			(2,'{"en":"Mudur", "uz":"uzMudur", "ru":"ruMudur"}',
				'{"en":"Mud.", "uz":"uzMud.", "ru":"ruMud."}',false,true);
						

insert into academy.employee_position (employee_id, department_id, title_id, start_date) 
	values (1,1,1,'2000-01-01');

insert into academy.employee_position (employee_id, department_id, title_id, start_date) 
	values (1,2,2,'2000-01-01');


select assert_equals('{"person": {"h": null, "photo": null, "jshshir": "jsh1", "surname": {"en": "sen", "ru": "sru", "uz": "suz"}, "person_id": 1, "first_name": {"en": "fen", "ru": "fru", "uz": "fuz"}, "father_name": {"en": "faen", "ru": "faru", "uz": "fauz"}, "date_of_birth": "1999-10-20"}, "positions": [{"end_date": null, "title_id": 1, "start_date": "2000-01-01", "title_name": {"en": "Profesor", "ru": "ruProfesor", "uz": "uzProfesor"}, "department_id": 1, "department_name": {"en": "Computer Engineering", "ru": "ruComputer  Engineering", "uz": "uzComputer  Engineering"}}, {"end_date": null, "title_id": 2, "start_date": "2000-01-01", "title_name": {"en": "Mudur", "ru": "ruMudur", "uz": "uzMudur"}, "department_id": 2, "department_name": {"en": "Medicine", "ru": "ruMedicine", "uz": "uzMedicine"}}]}',(academy.employee_get(1)).h::text);

			
--@END


