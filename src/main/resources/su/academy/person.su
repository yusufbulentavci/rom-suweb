--@DEPENDS:.base,testing

--@TABLE uzanti=prs
create table academy.person(
	h jsonb,
    person_id serial primary key,
    jshshir character varying(14),
    first_name jsonb,
    surname jsonb,
    father_name jsonb,
    date_of_birth date,
    photo text
  );
--@END

--@FUNCTION ver=1
create function academy.person_new(p_jshshir text, p_first_name jsonb, p_surname jsonb, p_father_name jsonb, p_date_of_birth date, p_photo text) returns academy.person as $$
declare
	v_ret academy.person;
begin
	insert into academy.person(jshshir, first_name, surname, father_name, date_of_birth, photo) 
		values (p_jshshir, p_first_name, p_surname, p_father_name, p_date_of_birth, p_photo) returning * into v_ret;
	return v_ret;
end;
$$ language 'plpgsql';
--@END

--@FUNCTION ver=1
create function academy.person_list(p_lng text, p_jshshir text, p_first_name text, p_surname text) returns setof academy.person as $$
begin
	return query
		select null::jsonb,person_id, jshshir, first_name, surname, father_name, date_of_birth, null
			from academy.person
			where
				(p_jshshir is null or p_jshshir=jshshir)
				and (p_first_name is null or p_lng is null or first_name->>p_lng=p_first_name)
				and (p_surname is null or p_lng is null or  surname->>p_lng=p_surname)
			limit 200;

end;
$$ language 'plpgsql';
--@END

--@FUNCTION 
create function academy.person_get(a_id int) returns academy.person as $$
declare
	v_ret academy.person;
begin
	select * into v_ret 
		from academy.person
		where
			person_id=a_id;
	return v_ret;
end;
$$ language 'plpgsql';
--@END


--@FUNCTION ver=1
create function academy.person_update(a_id int, p_jshshir text, p_first_name jsonb, p_surname jsonb, p_father_name jsonb, p_date_of_birth date, p_photo text) returns academy.person as $$
declare
	v_ret academy.person;
begin
	update academy.person
		set
			jshshir=p_jshshir,
			first_name=p_first_name,
			surname=p_surname,
			father_name=p_father_name,
			date_of_birth=p_date_of_birth,
			photo=p_photo
		where
			person_id=a_id
		returning * into v_ret;
	return v_ret;
end;
$$ language 'plpgsql';
--@END

--@FUNCTION 
create function academy.person_delete(a_id int) returns academy.person as $$
declare
	v_ret academy.person;
begin
	delete 
		from academy.person
		where
			person_id=a_id
		returning * into v_ret;
	return v_ret;
end;
$$ language 'plpgsql';
--@END

--@RUN utest
select check_not_null((academy.person_new('jshshir2','{"en":"name"}'::jsonb, '{"en":"sur"}'::jsonb, '{"en":"fathe"}'::jsonb, '13-11-1774'::date, null)).person_id);
select check_not_null((academy.person_get(1)).person_id);
select assert_equals(1, (select count(*)  from academy.person_list(null,null,null,null)));
select assert_equals(1, (select count(*)  from academy.person_list('en',null,null,'sur')));
select assert_equals(0, (select count(*)  from academy.person_list('en',null,null,'ur')));

select check_not_null((academy.person_update(1, 'jshshir2','{"en":"name"}'::jsonb, '{"en":"ur"}'::jsonb, '{"en":"fathe"}'::jsonb, '13-11-1774'::date, null)).person_id);

select assert_equals(1, (select count(*)  from academy.person_list('en',null,null,'ur')));

select check_not_null(academy.person_delete(1));

select assert_equals(0, (select count(*)  from academy.person_list('en',null,null,'ur')));
--@END
